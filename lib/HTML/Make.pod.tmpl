[%- MACRO example(file) BLOCK %]
[%- pl =  file _ ".pl" -%]
[%- out = file _ "-out.txt" -%]
[% INCLUDE $pl | xtidy %]

produces output

[% INCLUDE $out | xtidy %]

=begin HTML

<p>
As HTML, this looks like
</p>

[% INCLUDE $out %]

=end HTML

(This example is included as L<F<[% pl
%]>|https://api.metacpan.org/source/BKB/C-Tokenize-[% info.version
%]/examples/[% pl %]> in the distribution.)  
[%- END -%]

[%- start_year=2012 -%]

=encoding UTF-8

=head1 NAME

HTML::Make - A flexible HTML generator

=head1 SYNOPSIS

[% example("synopsis") %]

=head1 VERSION

This documents HTML::Make version [% info.version %] corresponding to git
commit L<[% commit.commit %]|[% info.repo %]/commit/[% commit.commit %]>
released on [% commit.date %].

=head1 DESCRIPTION

HTML::Make is an HTML generator. It was designed for generating HTML
fragments rather than complete pages. A typical use would be for
automating generation of a list or table within an HTML document.

=head1 METHODS

=head2 new

    my $element = HTML::Make->new ('li');

Make a new HTML element of the specified type.

It is possible to add attributes or text to the item. To add
attributes, use the following syntax:

    my $element = HTML::Make->new ('li', attr => {class => 'biglist'});

To add text,

    my $element = HTML::Make->new ('li', text => "White punks on dope");

Both attributes and text may be added:

    my $element = HTML::Make->new ('li', attr => {id => 'ok'}, text => 'OK');

HTML::Make uses the list of known HTML tags from
L</HTML::Valid::Tagset>, and will issue a warning if the type given as
the first argument to L</new> is not on its list of tags. To switch
off this behaviour, use the C<nocheck> option:

    my $freaky = HTML::Make->new ('freaky', nocheck => 1);

=head2 add_attr

    $obj->add_attr (class => 'buggles');

Add attributes to the specified object, in other words

    my $obj = HTML::Make->new ('li');
    $obj->add_attr (class => 'beano');
    my $obj_text = $obj->text ();
    # <li class="beano"></li>

This issues a warning of the form B<"Overwriting attribute 'class' for
'li'"> if the object already contains an attribute of the specified
type.

This issues a warning if the attribute is not valid for the tag,
according to L<HTML::Valid::Tagset/tag_attr_ok>. This is restricted to
what is valid in HTML5.

=head2 add_text

    $element->add_text ('buggles');

Add text to C<$element>. For example,

    my $element = HTML::Make->new ('p');
    $element->add_text ('peanuts');
    print $element->text ();
    # <p>peanuts</p>

The text may contain HTML elements:

    my $element = HTML::Make->new ('p');
    $element->add_text ('peanuts <i>eggs</i>');
    print $element->text ();
    # <p>peanuts <i>eggs</i></p>

The return value is the added text object.

=head2 push

    my $child = $element->push ('tag');

Add child element of type <tag> to C<$element> and return the result
as a new C<HTML::Make> object. For example,

[% example("table") %]

An object created with HTML::Make may also be pushed:

[% example('push-new') %]

It's also possible to add all of the same arguments as L</new>, for
example

    $element->push ('a', attr => {href => 'http://www.example.org/'});

This warns if you add some types of elements to possibly inappropriate
parent elements. For example if you add an <li> tag to a <tr> or
something.

=head2 opening_tag

    my $tag = $obj->opening_tag ();

Returns the text value of the HTML tag opening, complete with
attributes.

=head2 text

    $element->text ();

This function returns the element as text.

    my $p = HTML::Make->new ('p');
    print $p->text ();
    # <p></p>

=head2 multiply

    my @elements = $obj->multiply ('li', \@contents);

Create multiple child elements of C<$obj> of type given by the first
argument, with text contents given by C<\@contents>.

[% example ("multiply") %]

=head1 EXTENDED EXAMPLES

=head2 JSON to HTML

This script converts arbitrary JSON to HTML:

[% example("json-to-html") %]

=head1 BUGS

This module assumes you want to make HTML5.

There is no way to control the whitespace in the output HTML.

There is no way to add HTML comments to the output except by adding
them as text.

=head1 DEPENDENCIES

This module depends on the following Perl modules.

=over

=item Carp

L<Carp> is used to report errors.

=item HTML::Valid::Tagset

L<HTML::Valid::Tagset> is used to validate tags and tag/attribute pairs.

=back

=head1 SEE ALSO

=over

=item L<CGI>

The CGI module contains HTML generation.

=item L<HTML::Generator|http://cleancode.sourceforge.net/api/perl/HTML/Generator.html>

This project is on the SourceForge site, not CPAN.

=item L<HTML::Native>

Generate and manipulate HTML as native Perl data structures

=item L<HTML::TagTree>

An HTML generator via a tree of 'tag' objects

=item L<HTML::Template>

HTML-like templating language

=item L<HTML::Tiny>

This is similar to the HTML generation which is in L<CGI>. Its last
update, version 1.05, was in 2009, and it doesn't include HTML5 tags.

=item L<HTML::FromArrayref>

Output HTML described by a Perl data structure

=back

[% INCLUDE "author" %]
